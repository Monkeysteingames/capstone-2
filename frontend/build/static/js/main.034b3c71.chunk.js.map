{"version":3,"sources":["UserContext.js","NavBar.js","Home.js","CompanyCard.js","api.js","CompaniesList.js","JobCard.js","CompanyDetails.js","JobsList.js","Login.js","Signup.js","Profile.js","ProtectedRoute.js","Routes.js","hooks/localStorage.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","React","createContext","NavBar","logout","currentUser","useContext","className","exact","to","onClick","username","Home","CompanyCard","description","handle","name","numEmployees","body","style","backgroundColor","borderColor","tag","BASE_URL","process","JoblyApi","endpoint","data","method","console","debug","url","headers","Authorization","token","params","axios","error","response","message","Array","isArray","this","request","res","company","companies","jobs","user","newUser","id","CompaniesList","useState","setCompanies","useEffect","a","getCompanies","map","comp","i","key","idx","JobCard","title","salary","equity","jobId","applyForJob","jobsApplied","applied","setApplied","has","CompanyDetails","setCompany","useParams","getCompany","job","JobsList","setJobs","getJobs","Login","login","password","formData","setFormData","history","useHistory","handleChange","evt","target","value","fData","onSubmit","preventDefault","push","type","onChange","Signup","signup","firstName","lastName","email","Profile","setCurrentUser","updateData","updateUser","updatedUser","ProtectedRoute","path","children","Routes","useLocalStorage","firstValue","initialValue","localStorage","getItem","item","setItem","removeItem","App","setToken","Set","setJobsApplied","authenticate","register","apply","e","jwt","decode","getUser","applications","getCurrentUser","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.034b3c71.chunk.js","sourcesContent":["import React from \"react\";\n\nconst UserContext = React.createContext();\n\nexport default UserContext;","import React, { useContext } from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport { Navbar, NavItem } from \"reactstrap\";\nimport UserContext from \"./UserContext\";\n\nfunction NavBar({ logout }) {\n  const { currentUser } = useContext(UserContext);\n  \n  // if we're not logged in we only want to show the login and signup options \n  // the landing page nav will be visible at all times\n\n  return (\n    <div>\n      <Navbar>\n        <NavItem>\n          <NavLink className=\"nav-link\" exact to=\"/\">Jobly</NavLink>\n        </NavItem>\n        {currentUser ?\n        <>\n          <NavItem>\n            <NavLink className=\"nav-link\" exact to=\"/jobs\">jobs</NavLink>\n          </NavItem>\n\n          <NavItem>\n            <NavLink className=\"nav-link\" exact to=\"/companies\">companies</NavLink>\n          </NavItem>\n\n          <NavItem>\n            <NavLink className=\"nav-link\" exact to=\"/profile\">profile</NavLink>\n          </NavItem>\n\n          <NavItem>\n            <Link to=\"/\" onClick={logout}>Log out {currentUser.username}</Link>\n          </NavItem>    \n        </>\n        :\n        <>\n          <NavItem>\n            <NavLink className=\"nav-link\" exact to=\"/login\">login</NavLink>\n          </NavItem>\n          \n          <NavItem>\n            <NavLink className=\"nav-link\"exact to=\"/signup\">sign up</NavLink>\n          </NavItem>\n        </>\n        }\n      </Navbar>\n    </div>\n  );\n}\n\nexport default NavBar;","import React, { useContext } from 'react';\nimport UserContext from \"./UserContext\";\nimport { Link } from \"react-router-dom\";\n\nfunction Home() {\n  const currentUser = useContext(UserContext);\n\n    return (\n      <div className='home'>\n        {!currentUser ? \n          <>\n            <h2>Create an account or log in to start working towards your future!</h2>\n            <Link to=\"/login\">\n              <button>\n                Login \n              </button>\n            </Link>\n            <Link to=\"/signup\">\n              <button>\n                Sign up \n              </button>\n            </Link>\n          </>\n        :\n          <>\n            <div>\n              <h2>Welcome to Jobly!</h2>\n              <p>This is your number 1 stop for job searching on the internet!</p>\n            </div>\n          </>\n        }\n      </div>\n    );\n  };\n\nexport default Home;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport {CardBody, CardSubtitle, CardText, CardTitle, Card} from 'reactstrap';\n\nfunction CompanyCard({ description, handle, name, numEmployees }) {\n\n    return (\n    <div>\n        <Card\n        body\n        style={{\n        backgroundColor: 'lightgray',\n        borderColor: 'lightgray'\n        }}\n        >\n            <CardBody>\n                <CardTitle tag=\"h4\">\n                {name}\n                </CardTitle>\n                <CardSubtitle\n                className=\"mb-2 text-muted\"\n                tag=\"h6\"\n                >\n                {description}\n                </CardSubtitle>\n                <CardText>\n                    Number of employees: {numEmployees}\n                </CardText>\n                <Link to={`/companies/${handle}`}>\n                Jobs\n                </Link>\n            </CardBody>\n        </Card>\n      </div>\n      );\n};\n\nexport default CompanyCard;\n","\nimport axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { \n      Authorization: `Bearer ${JoblyApi.token}`,\n      'Access-Control-Allow-Origin' : 'http://localhost:300',\n      'Access-Control-Allow-Credentials' : 'true',\n      \"Access-Control-Allow-Methods\" : \"GET, POST, PATCH, DELETE\"\n    };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  };\n\n  /** Get all companies. */\n\n  static async getCompanies() {\n    let res = await this.request(`companies`);\n    return res.companies;\n  };\n\n  /** Get all jobs. */\n\n  static async getJobs() {\n    let res = await this.request(`jobs`);\n    return res.jobs;\n  };\n\n  /** Authenticate user when attempting login. */\n\n  static async authenticate(user) {\n    let res = await this.request(`auth/token`, user, 'post');\n    return res.token;\n  };\n\n  /** Register new user to DB on signup. */\n\n  static async register(newUser) {\n    let res = await this.request(`auth/register`, newUser, 'post');\n    return res.token;\n  };\n\n  /** Get user by username. */\n\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  };\n\n  /** Patch user info with data from profile page. */\n\n  static async updateUser(username, user) {\n    let res = await this.request(`users/${username}`, user, 'patch');\n    return res.user;\n  };\n\n  static async apply(username, id) {\n    let res = await this.request(`users/${username}/jobs/${id}`, {}, 'post');\n    return res;\n  }\n}\n\nexport default JoblyApi;","import React, { useEffect, useState } from 'react';\nimport CompanyCard from './CompanyCard';\nimport JoblyApi from './api';\n\nfunction CompaniesList() {\n    const [companies, setCompanies] = useState(null);\n\n    useEffect(function fetchUserWhenMounted() {\n        async function getCompanies() {\n            const res = await JoblyApi.getCompanies();\n            setCompanies(res);\n        }\n        getCompanies();\n    }, []);\n\n    return (\n      <div>\n          {!companies ? <p>loading....</p> :\n          <>\n            {companies.map((comp, i) => (\n                <CompanyCard \n                description={comp.description} \n                handle={comp.handle} \n                name={comp.name} \n                numEmployees={comp.numEmployees} \n                key={i} \n                idx={i} />\n            ))}\n            </>}\n      </div>\n    );\n  }\n\n\n  export default CompaniesList;","import React, { useContext, useState, useEffect } from 'react';\nimport {CardBody, CardSubtitle, CardText, CardTitle, Card, Button} from 'reactstrap';\nimport UserContext from './UserContext';\n\nfunction JobCard({title, salary, equity, jobId}) {\n  const { currentUser, applyForJob, jobsApplied } = useContext(UserContext);\n  const [applied, setApplied] = useState();\n\n  useEffect(function appliedToJob() {\n    setApplied(true);\n  }, [applied]);\n\n  async function handleApply() {\n  applyForJob(currentUser.username, jobId);\n  };\n  \n  return (\n    <div>\n      <Card\n      body\n      style={{\n      backgroundColor: 'lightgray',\n      borderColor: 'lightgray'\n      }}\n      >\n        <CardBody>\n          <CardTitle tag=\"h4\">\n            {title}\n          </CardTitle>\n          <CardSubtitle\n          className=\"mb-2 text-muted\"\n          tag=\"h6\"\n          >\n            Salary: {salary}\n          </CardSubtitle>\n          <CardText>\n            Equity: {equity}\n          </CardText>\n          {jobsApplied.has(jobId) ? \n            <Button>\n              Applied\n            </Button>\n            :\n            <Button onClick={handleApply}>\n              Apply\n            </Button>\n          }\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default JobCard;\n","import React, { useEffect, useState } from 'react';\nimport JobCard from './JobCard';\nimport JoblyApi from './api';\nimport { useParams } from \"react-router\";\n\n\nfunction CompanyDetails() {\n    const [company, setCompany] = useState(null);\n    const { handle } = useParams();\n\n    // grab company info when component has mounted and generate jobs associated with company with handle of :handle\n\n    useEffect(function fetchCompanyWhenMounted() {\n        async function getCompany() {\n            const res = await JoblyApi.getCompany(handle);\n            setCompany(res);\n        }\n        getCompany();\n    }, [handle]);\n\n    return (\n      <div>\n          {!company ? <p>loading....</p> :\n            <>\n            <h1>{company.name}</h1>\n            <h3>{company.description}</h3>\n            {company.jobs.map((job, i) => (\n                <JobCard \n                title={job.title} \n                salary={job.salary}\n                equity={job.equity} \n                jobId={job.id}\n                key={job.id} />\n            ))}\n            </>\n            }\n      </div>\n    );\n  }\n\n\n  export default CompanyDetails;","import React, { useEffect, useState } from 'react';\nimport JobCard from './JobCard';\nimport JoblyApi from './api';\n\nfunction JobsList() {\n    const [jobs, setJobs] = useState(null);\n\n    // when component has mounted retreive all jobs from DB\n\n    useEffect(function fetchUserWhenMounted() {\n        async function getJobs() {\n            const res = await JoblyApi.getJobs();\n            setJobs(res);\n        }\n        getJobs();\n    }, []);\n\n    return (\n      <div>\n          {!jobs ? <p>loading....</p> :\n          <>\n            {jobs.map((job, i) => (\n                <JobCard \n                title={job.title} \n                salary={job.salary} \n                equity={job.equity} \n                key={job.id} \n                jobId={job.id} />\n            ))}\n            </>}\n      </div>\n    );\n  };\n\n\n  export default JobsList;","import React, { useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { Card, CardBody, Button } from \"reactstrap\";\nimport \"./App.css\";\n\n\nfunction Login({ login }) {\n  const [formData, setFormData] = useState({\n    username : '',\n    password : ''\n  });\n  const history = useHistory();\n\n  function handleChange (evt) {\n    const { name, value } = evt.target;\n    setFormData(fData => ({\n      ...fData,\n      [name]: value\n    }));\n  }\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    login(formData);\n    history.push(\"/\");\n  }\n\n  return (\n    <section>\n      <Card>\n        <CardBody>\n            <form onSubmit={handleSubmit}>\n              <p>\n                <label>\n                <b>Username: </b>\n                <input\n                type=\"text\"\n                name=\"username\"\n                value={formData.username}\n                onChange={handleChange} />\n                </label>\n              </p>\n\n              <p>\n                <label>\n                <b>Password: </b>\n                <input\n                type=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange} />\n                </label>\n              </p>\n\n              <Button>Login</Button>\n            </form>\n          </CardBody>\n        </Card>\n      </section>\n    );\n}\n// end\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { Card, CardBody, Button } from \"reactstrap\";\nimport \"./App.css\";\n\n\nfunction Signup({ signup }) {\n  const [formData, setFormData] = useState({\n    username : '',\n    password : '',\n    firstName : '',\n    lastName : '',\n    email : ''\n  });\n  const history = useHistory();\n\n  function handleChange (evt) {\n    const { name, value } = evt.target;\n    setFormData(fData => ({\n      ...fData,\n      [name]: value\n    }));\n  }\n\n  // API register post request requires: { username, password, firstName, lastName, email }\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    signup(formData);\n    history.push('/');\n  }\n\n  return (\n    <section>\n      <Card>\n        <CardBody>\n            <form onSubmit={handleSubmit}>\n              <p>\n                <label>\n                <b>Username: </b>\n                <input\n                type=\"text\"\n                name=\"username\"\n                value={formData.username}\n                onChange={handleChange} />\n                </label>\n              </p>\n\n              <p>\n                <label>\n                <b>Password: </b>\n                <input\n                type=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange} />\n                </label>\n              </p>\n\n              <p>\n                <label>\n                <b>First name: </b>\n                <input\n                type=\"text\"\n                name=\"firstName\"\n                value={formData.firstName}\n                onChange={handleChange} />\n                </label>\n              </p>\n\n              <p>\n                <label>\n                <b>Last name: </b>\n                <input\n                type=\"text\"\n                name=\"lastName\"\n                value={formData.lastName}\n                onChange={handleChange} />\n                </label>\n              </p>\n\n              <p>\n                <label>\n                <b>Email: </b>\n                <input\n                type=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange} />\n                </label>\n              </p>\n\n              <Button>Sign up</Button>\n            </form>\n          </CardBody>\n        </Card>\n      </section>\n    );\n}\n// end\n\nexport default Signup;\n","import React, { useState, useContext } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { Card, CardBody, Button } from \"reactstrap\";\nimport UserContext from \"./UserContext\";\nimport JoblyApi from './api';\nimport \"./App.css\";\n\n\nfunction Profile() {\n  const { currentUser, setCurrentUser } = useContext(UserContext);\n  const [formData, setFormData] = useState({\n    username : currentUser.username,\n    password : '',\n    firstName : currentUser.firstName,\n    lastName : currentUser.lastName,\n    email : currentUser.email\n  });\n  const history = useHistory();\n\n  function handleChange (evt) {\n    const { name, value } = evt.target;\n    setFormData(fData => ({\n      ...fData,\n      [name]: value\n    }));\n  }\n\n  // the API patch request can only take: { password, firstName, lastName, email } \n  // we need the username to add to the params to tell the DB which user we're updating/patching\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n\n    let updateData = {\n      password: formData.password,\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email,\n    };\n    let updatedUser;\n\n    try { \n      const username = formData.username;\n      updatedUser = await JoblyApi.updateUser(username, updateData);\n    } catch (e) {\n      console.error(e);\n    };\n\n    setCurrentUser(updatedUser);\n    history.push(\"/\");\n  };\n\n  return (\n    <section>\n      <Card>\n        <CardBody>\n            <form onSubmit={handleSubmit}>\n              <div>\n                <label>Username</label>\n                <p className=\"form-control-plaintext\">{formData.username}</p>\n              </div>\n\n              <p>\n                <label>\n                <b>First name: </b>\n                <input\n                type=\"text\"\n                name=\"firstName\"\n                value={formData.firstName}\n                onChange={handleChange} />\n                </label>\n              </p>\n\n              <p>\n                <label>\n                <b>Last name: </b>\n                <input\n                type=\"text\"\n                name=\"lastName\"\n                value={formData.lastName}\n                onChange={handleChange} />\n                </label>\n              </p>\n\n              <p>\n                <label>\n                <b>Email: </b>\n                <input\n                type=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange} />\n                </label>\n              </p>\n\n              <p>\n                <label>\n                <b>Type in password to confirm changes: </b>\n                <input\n                type=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange} />\n                </label>\n              </p>\n\n              <Button>Update</Button>\n            </form>\n          </CardBody>\n        </Card>\n      </section>\n    );\n}\n// end\n\nexport default Profile;\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport UserContext from \"./UserContext\";\n\n// If we're not logged in send the user back to the landing page if attempting to access a protected route\n\nconst ProtectedRoute = ({ path, children }) => {\n    const { currentUser } = useContext(UserContext);\n\n    if (!currentUser) {\n        return <Redirect to=\"/\" />;\n    };\n    \n    return (\n            <Route exact path={path}>{children}</Route>\n    );\n};\n\nexport default ProtectedRoute;\n\n","import React from 'react';\nimport { Route } from \"react-router-dom\";\nimport Home from './Home';\nimport CompaniesList from './CompaniesList';\nimport CompanyDetails from './CompanyDetails';\nimport JobsList from './JobsList';\nimport Login from './Login';\nimport Signup from './Signup';\nimport Profile from './Profile';\nimport ProtectedRoute from './ProtectedRoute';\nimport { Redirect, Switch } from 'react-router-dom';\n\nfunction Routes({ login, signup }) {\n    return (\n      <div>\n      <Switch>\n        <Route exact path=\"/\"><Home login={login} signup={signup}/></Route>\n        <Route exact path=\"/login\"><Login login={login}/></Route>\n        <Route exact path=\"/signup\"><Signup signup={signup}/></Route>\n        <ProtectedRoute exact path=\"/companies/:handle\"><CompanyDetails /></ ProtectedRoute>\n        <ProtectedRoute exact path=\"/companies\"><CompaniesList /></ProtectedRoute>\n        <ProtectedRoute exact path=\"/jobs\"><JobsList /></ProtectedRoute>\n        <ProtectedRoute exact path=\"/profile\"><Profile /></ProtectedRoute>\n        <Redirect to=\"/\" />\n      </Switch>\n      </div>\n    );\n  };\n\nexport default Routes;\n\n\n\n\n","import { useState, useEffect } from \"react\";\n\nfunction useLocalStorage(key, firstValue = null) {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(function setKeyInLocalStorage() {\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport Routes from './Routes';\nimport JoblyApi from './api';\nimport UserContext from './UserContext';\nimport jwt from \"jsonwebtoken\";\nimport localStorage from './hooks/localStorage';\nimport './App.css';\n\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = localStorage(TOKEN_STORAGE_ID);\n  const [jobsApplied, setJobsApplied] = useState(new Set());\n\n  // When we update our token, we want to get updated info of our current user\n  useEffect(function fetchUserWhenMounted() {\n\n  async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getUser(username);\n          setCurrentUser(currentUser);\n          setJobsApplied(new Set(currentUser.applications));\n        } catch (e) {\n          console.error(e);\n          setCurrentUser(null);\n        };\n      };\n    };\n    getCurrentUser();\n    }, [token]);\n\n  // take form data from login form and authenticate user in DB and retrieve token\n  // set the current user with our retrieved token if validated\n\n  async function login(user) {\n    try {\n      const res = await JoblyApi.authenticate(user);\n      setToken(res);\n    } catch (e) {\n      console.error(e);\n    };\n  };\n\n  // clear toke and current user when we log out\n\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  };\n\n  // take form data from sign up form and register new user\n\n  async function signup(newUser) {\n    try {\n      const res = await JoblyApi.register(newUser);\n      setToken(res);\n    } catch (e) {\n      console.error(e);\n    };\n  };\n\n  // function provided to UserContext to use in our JobCard related applications process\n\n  async function applyForJob(username, id) {\n\n    try {\n      JoblyApi.apply(username, id);\n      setJobsApplied(new Set([...jobsApplied, id]));\n    } catch (e) {\n      console.error(e);\n    };\n  };\n\n  return (       \n  <BrowserRouter>\n    <UserContext.Provider value={{currentUser, setCurrentUser, applyForJob, jobsApplied, setJobsApplied}}>\n      <div className='App'>\n        <NavBar logout={logout} />\n        <Routes login={login} signup={signup} />    \n      </div>\n    </UserContext.Provider>    \n  </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}